<?xml version="1.0" encoding="UTF-8" ?>
<Module>
    <ModulePrefs title="Map Cluster"
        description="Add your location to the map, and see where everyone else is from, using a cluster visualization."
        screenshot="http://google-wave-resources.googlecode.com/svn/trunk/samples/extensions/gadgets/mapcluster/screenshot_mapcluster.png"
        thumbnail="http://wave-samples-gallery.appspot.com/images?img_id=41005&amp;img_type=thumbnail"
        author="Google"
        height="500" width="100%">
        <Require feature="wave" />
    </ModulePrefs>
    <Content type="html"><![CDATA[
    <html>
        <head>
            <script src="https://www.google.com/jsapi"></script>
            <script src="https://google-wave-resources.googlecode.com/svn/trunk/samples/extensions/gadgets/mapcluster/markerclusterer.js"></script>
            <script type="text/javascript">
                google.load('maps', '3', {
                    other_params: 'sensor=false'
                });
            
                var map;
                var bounds;
                var markerClusterer;
                var markersAdded;
                var viewerPosition;
                var infoWindow;
                var markers;
                
                function removeMe() {
                    var viewer = wave.getViewer();
                    var delta = {};
                    delta[viewer.getId()] = null;
                    wave.getState().submitDelta(delta);
                    document.getElementById('removeButton').disabled = true;
                }
                
                function showAddress(address) {
                    var country = '00';
                    var geocoder = new google.maps.Geocoder();
                    geocoder.geocode({address: address}, function(results, status) {
                        if (status == google.maps.GeocoderStatus.OK) {
                            var result = results[0];
                            viewerPosition = results[0].geometry.location;
                            for (var i = 0; i < result.address_components.length; i++) {
                                var address_component = result.address_components[i];
                                for (var j = 0; j < address_component.types.length; j++) {
                                    if (address_component.types[j] == 'country') {
                                        var country = address_component.short_name;
                                    }
                                }
                            }
                            var viewer = wave.getViewer();
                            var delta = {};
                            delta[viewer.getId()] = viewerPosition.lat() + ',' + viewerPosition.lng() + ',' + country;
                            wave.getState().submitDelta(delta);
                        } else {
                            alert("Address not found");
                        }
                    });
                }
                
                function saveLocationCallback() {
                    infoWindow.close();
                }
                
                function stateUpdated() {
                    var state = wave.getState();
                    if (state) {
                        for (var j = 0; j < markers.length; j++) {
                            markers[j].setMap(null);
                        }
                        markers = [];
                        var locationsAdded = {};
                        bounds = new google.maps.LatLngBounds();
                        var allKeys = state.getKeys();
                        if (allKeys.length == 0) { return; }
                        for (var i = 0; i < allKeys.length; i++) {
                            var key = allKeys[i];
                            var viewerData = state.get(key).split(',')
                            var latlngString = viewerData[0] + ',' + viewerData[1];
                            if (locationsAdded[latlngString]) {
                                locationsAdded[latlngString].push(key);
                            } else {
                                locationsAdded[latlngString] = [key];
                            }
                        }
                        for (var location in locationsAdded) {
                            var participantKeys = locationsAdded[location];
                            var lat = parseFloat(location.split(",")[0]);
                            var lng = parseFloat(location.split(",")[1]);
                            var latlng = new google.maps.LatLng(lat, lng);
                            bounds.extend(latlng);
                            var marker = new google.maps.Marker({position: latlng});
                            marker.clusterCount = participantKeys.length;
                            marker.setIcon(marker.iconUrl);
                            markersAdded[key] = marker;
                            attachInfoWindow(marker, participantKeys);
                            markers.push(marker);
                        }
                        if (markerClusterer) {
                            markerClusterer.clearMarkers();
                            markerClusterer.addMarkers(markers);
                        } else {
                            markerClusterer = new MarkerClusterer(map, markers);
                        }
                        zoomToBounds();
                    }
                }
                
                function attachInfoWindow(marker, participants) {
                
                    function openInfoWindow() {
                        var html = getInfoHtml(participants);
                        infoWindow.setContent(html.join(''));
                        infoWindow.setPosition(marker.getPosition());
                        infoWindow.open(map);
                    }
                
                    for (var i = 0; i < participants.length; i++) {
                        // pop open info window if viewer
                        var participantId = participants[i];
                        var viewerId = wave.getViewer() && wave.getViewer().getId();
                        if (participantId == viewerId) {
                            document.getElementById('addButton').value = 'Change Location';
                            document.getElementById('removeButton').disabled = false;
                        } else {
                            document.getElementById('addButton').value = 'Add Location';
                            document.getElementById('removeButton').disabled = true;
                        }
                        if (participantId == viewerId && viewerPosition) {
                            openInfoWindow();
                        }
                    }
                
                    google.maps.event.addListener(marker, 'click', function() {
                        openInfoWindow();
                    });
                }
                
                function getInfoHtml(participants) {
                    var html = [];
                    html.push('<br><table>');
                    for (var i = 0; i < participants.length; i++) {
                        html.push('<tr><td>');
                        var participant = wave.getParticipantById(participants[i]);
                        html.push('<img src="' + participant.getThumbnailUrl() + '" width="30" height="30">');
                        html.push('</td><td>' + participant.getDisplayName() + '<br>');
                        html.push('</td></tr>');
                    }
                    html.push('</table>');
                    return html;
                }
                
                function zoomToBounds() {
                    map.fitBounds(bounds);
                }
                
                function participantsUpdated() {
                    document.getElementById('addButton').disabled = false;
                }
                
                function makeMap() {
                    var center = new google.maps.LatLng(-19.949023, -69.63355);
                    map = new google.maps.Map(document.getElementById('map'), {
                        zoom: 20,
                        center: center,
                        mapTypeId: google.maps.MapTypeId.SATELLITE
                    });
                    infoWindow = new google.maps.InfoWindow();
                    markersAdded = {};
                    markers = [];
                }
                
                function init() {
                    gadgets.window.adjustHeight(500);
                    makeMap();
                    if (wave && wave.isInWaveContainer()) {
                        wave.setStateCallback(stateUpdated);
                        wave.setParticipantCallback(participantsUpdated);
                    }
                    stateUpdated();
                }
                
                gadgets.util.registerOnLoadHandler(init);
            </script>
            <style>
                body {
                    font-size: 12px;
                }
                p {
                    margin: 0;
                }
                #gadget-wrapper {
                    padding: 3px;
                    border:1px solid #5590D2;
                }
                #address {
                    width: 240px;
                }
                #map {
                    width: 100%;
                    height: 450px;
                }
            </style>
        </head>
        <body>
            <div id="gadget-wrapper">
                <form action="" onsubmit="showAddress(this.address.value); return false">
                    <p>
                        Enter your city and/or country to place yourself on the map below:<br>
                        <input id="address" type="text" name="address" value="" />
                        <input id="addButton" type="submit" value="Add/Change" disabled/>
                        <input id="removeButton" type="button" value="Remove" onclick="removeMe()" disabled/>
                    </p>
                </form>
                <div id="map"></div>
            </div>
        </body>
    </html>
    ]]></Content>
</Module>
